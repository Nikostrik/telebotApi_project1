import sqlite3
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from config import API_TOKEN, ADMIN_ID

bot = telebot.TeleBot(API_TOKEN)

def init_db():
    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()

    cursor.execute("DROP TABLE IF EXISTS products")
    cursor.execute("DROP TABLE IF EXISTS orders")

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            price INTEGER NOT NULL,
            description TEXT NOT NULL
        )
    """)

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL,
            status TEXT DEFAULT 'pending',
            UNIQUE(user_id, product_id),
            FOREIGN KEY (product_id) REFERENCES products (id)
        )
    """)
    conn.commit()
    conn.close()

def add_test_products():
    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()

    test_products = [
        ("–®–æ–∫–æ–ª–∞–¥ \"–†–æ—à–µ–Ω\"", 50, "–°–º–∞—á–Ω–∏–π –º–æ–ª–æ—á–Ω–∏–π —à–æ–∫–æ–ª–∞–¥ –≤—ñ–¥ –†–æ—à–µ–Ω."),
        ("–¢–æ—Ä—Ç \"–ö–∏—ó–≤—Å—å–∫–∏–π\"", 300, "–ö–ª–∞—Å–∏—á–Ω–∏–π —Ç–æ—Ä—Ç —ñ–∑ –≥–æ—Ä—ñ—Ö–∞–º–∏ —Ç–∞ –±–µ–∑–µ.")
    ]

    for product in test_products:
        cursor.execute("""
            INSERT OR IGNORE INTO products (name, price, description)
            VALUES (?, ?, ?)
        """, product)

    conn.commit()
    conn.close()

@bot.message_handler(commands=['catalog'])
def send_catalog(message):
    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, price FROM products")
    products = cursor.fetchall()
    conn.close()

    if not products:
        bot.reply_to(message, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏.")
        return

    markup = InlineKeyboardMarkup()
    for product in products:
        button_text = f"{product[1]} - {product[2]} –≥—Ä–Ω"
        callback_data = f"product_{product[0]}"
        markup.add(InlineKeyboardButton(button_text, callback_data=callback_data))

    bot.reply_to(message, "üìã –ù–∞—à—ñ —Ç–æ–≤–∞—Ä–∏: "
                          " –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ç–æ–≤–∞—Ä."
                          " –©–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –Ω–æ–º–µ—Ä", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def product_details(call):
    product_id = int(call.data.split("_")[1])
    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, price, description FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if product:
        bot.send_message(call.message.chat.id, f"üìÑ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É:\n\n"
                                               f"–ù–∞–∑–≤–∞: {product[0]}\n"
                                               f"–¶—ñ–Ω–∞: {product[1]} –≥—Ä–Ω\n"
                                               f"–û–ø–∏—Å: {product[2]}")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def product_details(call):
    product_id = int(call.data.split("_")[1])
    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, price, description FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()

    if product:
        bot.send_message(call.message.chat.id, f"üìÑ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É:\n"
                                             f"–ù–∞–∑–≤–∞: {product[0]}\n"
                                             f"–¶—ñ–Ω–∞: {product[1]} –≥—Ä–Ω\n"
                                             f"–û–ø–∏—Å: {product[2]}\n")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_order(message):
    product_id = int(message.text)
    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, price FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()

    if product:
        user_id = message.from_user.id

        try:
            cursor.execute("INSERT INTO orders (user_id, product_id, status) VALUES (?, ?, 'pending')",
                           (user_id, product_id))
            conn.commit()

            order_id = cursor.lastrowid

            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{order_id}"))
            markup.add(InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{order_id}"))

            bot.reply_to(message,
                         f"üì¶ –í–∏ –æ–±—Ä–∞–ª–∏: {product[1]}\nüí∞ –¶—ñ–Ω–∞: {product[2]} –≥—Ä–Ω\n"
                         f"üßæ –ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É: {order_id}\n",
                         reply_markup=markup)
        except sqlite3.IntegrityError:
            bot.reply_to(message, "‚ùå –í–∏ –≤–∂–µ –∑–∞–º–æ–≤–∏–ª–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    conn.close()


@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_") or call.data.startswith("cancel_"))
def handle_payment_buttons(call):
    try:
        order_id = int(call.data.split("_")[1])
        action = call.data.split("_")[0]

        conn = sqlite3.connect("store.db")
        cursor = conn.cursor()

        if action == "confirm":
            cursor.execute("UPDATE orders SET status = 'paid' WHERE id = ?", (order_id,))
            conn.commit()
            bot.send_message(call.message.chat.id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞—Ö—É–Ω–∫–æ–º {order_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        elif action == "cancel":
            cursor.execute("UPDATE orders SET status = 'canceled' WHERE id = ?", (order_id,))
            conn.commit()
            bot.send_message(call.message.chat.id, f"‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞—Ö—É–Ω–∫–æ–º {order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")

        conn.close()
        bot.answer_callback_query(call.id, "–î—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞.")  # –û–±–æ–≤'—è–∑–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    except Exception as e:
        print(f"Error in handle_payment_buttons: {e}")
        bot.answer_callback_query(call.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")


@bot.message_handler(commands=['help'])
def send_help(message):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
            "/catalog - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n"
            "/add_item - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
            "/remove_item - –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
            "/orders - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
            "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç\n")

@bot.message_handler(commands=['info'])
def send_info(message):
    bot.reply_to(message, "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞–≥–∞–∑–∏–Ω—É –†–æ—à–µ–Ω. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥, —Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∑–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏!")

@bot.message_handler(commands=['add_item'])
def add_item(message):
    if message.chat.id == ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ù–∞–∑–≤–∞, –¶—ñ–Ω–∞, –û–ø–∏—Å")
    bot.register_next_step_handler(msg, process_add_item)

def process_add_item(message):
    try:
        name, price, description = map(str.strip, message.text.split(",", 2))
        conn = sqlite3.connect("store.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO products (name, price, description) VALUES (?, ?, ?)", (name, int(price), description))
        conn.commit()
        conn.close()
        bot.reply_to(message, f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—è.")

@bot.message_handler(commands=['remove_item'])
def remove_item(message):
    if message.chat.id == ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
    bot.register_next_step_handler(msg, process_remove_item)

def process_remove_item(message):
    try:
        product_id = int(message.text)
        conn = sqlite3.connect("store.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        if cursor.rowcount == 0:
            bot.reply_to(message, "‚ùå –¢–æ–≤–∞—Ä —ñ–∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        else:
            bot.reply_to(message, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        conn.commit()
        conn.close()
    except ValueError:
        bot.reply_to(message, "‚ùå ID —Ç–æ–≤–∞—Ä—É –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
    except Exception as e:
        bot.reply_to(message, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É.")

@bot.message_handler(commands=['orders'])
def view_orders(message):
    if message.chat.id == ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    conn = sqlite3.connect("store.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT orders.id, products.name, orders.status, orders.user_id
        FROM orders
        JOIN products ON orders.product_id = products.id
    """)
    orders = cursor.fetchall()
    conn.close()

    if not orders:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    orders_text = "\n".join([f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ID {o[0]}: {o[1]} (–°—Ç–∞—Ç—É—Å: {o[2]}, User ID: {o[3]})" for o in orders])
    bot.reply_to(message, f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å:\n{orders_text}")

@bot.message_handler(commands=['feedback'])
def feedback_start(message):
    msg = bot.reply_to(message, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫, —ñ –º–∏ –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—î–º–æ.")
    bot.register_next_step_handler(msg, handle_feedback)

def handle_feedback(message):
    feedback = message.text
    bot.send_message(ADMIN_ID, f"–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ {message.chat.username}: {feedback}")
    bot.reply_to(message, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('/catalog'), KeyboardButton('/help'))
    keyboard.add(KeyboardButton('/info'), KeyboardButton('/feedback'))
    bot.reply_to(message, " –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É –†–æ—à–µ–Ω! üç¨\n"
                          "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:", reply_markup=keyboard)

init_db()
add_test_products()
bot.infinity_polling()
